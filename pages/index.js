import { useEffect } from 'react';
import Head from 'next/head';
import Image from 'next/image';

import ContentWrapper from '../components/ContentWrapper';
import Header from '../components/Header';
import Blog from '../components/Blog';
import styles from '../styles/Home.module.css';
import Footer from '../components/Footer';

const URL = process.env.STRAPIBASEURL;
export default function Home({ blogs }) {
  useEffect(() => {
    console.log('Blogs', blogs);
  }, [blogs]);

  return (
    <ContentWrapper>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a>Ronchi.io!</a>
        </h1>
        {/* {blogs.data.map(({ attributes }) => {
          return (
            <div key={attributes.slug}>
              <h2>{attributes.title}</h2>
              <Image
                src={attributes.splash.data[0].attributes.url}
                height={200}
                width={350}
              />
            </div>
          );
        })} */}

        <div className={styles.grid}>
          {blogs.data.map(({ attributes }) => {
            return (
              <Blog
                key={attributes.slug}
                title={attributes.title}
                description={attributes.description}
                slug={attributes.slug}
              />
            );
          })}
        </div>
      </main>
      <Footer/>
    </ContentWrapper>
  );
}

export async function getStaticProps(context) {
  const query = `{
    blogposts {
    data {
      attributes {
        title
        description
        slug
      }
    }
  }
  }`;
  const request = {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      query: query,
    }),
  };
  const response = await fetch(`${URL}/graphql`, request);
  const responseData = await response.json();
  console.log('Data', responseData.data.blogposts.data);
  return {
    props: {
      blogs: responseData?.data?.blogposts,
      revalidate: 10,
    },
  };
}
